#!/bin/sh
# Check the current system for pfac's preferences
set -e

# Set default values
DOTFILES_PATH="$HOME/Developer/pfac/.files"
PROBLEMS=0

# Report how many problems and exit if any
report_and_exit () {
  [ $PROBLEMS -eq 0 ] && echo 'No problems found'
  [ $PROBLEMS -eq 1 ] && echo 'Found 1 problem'
  [ $PROBLEMS -gt 1 ] && echo "Found $PROBLEMS problems"

  return "$PROBLEMS"
}

# Check Ansible is installed
if command -v ansible >/dev/null; then
  echo "--- Ansible found: $(ansible --version | head -n1 | cut -d\  -f2) in $(command -v ansible)"
else
  echo "/!\ Ansible not found" >&2
  PROBLEMS=$((PROBLEMS + 1))
fi

# Check Git is installed
if command -v git >/dev/null; then
  echo "--- Git found: $(git --version | cut -d\  -f3) in $(command -v git)"
else
  echo "/!\ Git not found" >&2
  PROBLEMS=$((PROBLEMS + 1))
fi

# Check repository is present
if [ -d "$DOTFILES_PATH" -a -d "$DOTFILES_PATH/.git" ]; then
  echo "--- Repository found in $DOTFILES_PATH"
else
  echo "/!\ Repository not found in $DOTFILES_PATH" >&2
  PROBLEMS=$((PROBLEMS + 1))
  report_and_exit
fi

# Change to the repository directory
cd "$DOTFILES_PATH"

# Check repository is up-to-date
git fetch
GIT_BEHIND_COUNT="$(git rev-list --count HEAD..origin)"
if [ "$GIT_BEHIND_COUNT" -eq 0 ]; then
  echo "--- Repository is up-to-date"
else
  [ "$GIT_BEHIND_COUNT" -eq 1 ] &&
    echo '/!\ Repository is 1 commit behind origin' >&2
  [ "$GIT_BEHIND_COUNT" -gt 1 ] &&
    echo "/!\ Repository is $GIT_BEHIND_COUNT commits behind origin" >&2
  PROBLEMS=$((PROBLEMS + 1))
fi

report_and_exit
