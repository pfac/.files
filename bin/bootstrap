#!/bin/sh
# Configure the system with pfac's preferences.
set -e

# Set default values
BRANCH=master
CLONE_TO="$HOME/Developer/pfac/.files"
SUDO=''

# Detect system
SYSTEM="$(uname)"
case "$SYSTEM" in
  Linux)
    if [ -f /etc/os-release ]; then
      SYSTEM="$SYSTEM:$(grep '^NAME=' /etc/os-release | cut -d= -f2 | sed 's/"//g' | awk -c '{ print $1 }')"
    fi
    if [ -f /etc/lsb-release ]; then
      SYSTEM="$SYSTEM:$(grep DISTRIB_ID /etc/lsb-release | cut -d= -f2)"
    fi
esac

# Detect privileges
[ "$(whoami)" != 'root' ] && SUDO='sudo'

# Process options
while getopts 'b:' option; do
  case "$option" in
    b)
      BRANCH="$OPTARG"
      ;;
    \?)
      echo "Unknown option $option" >&2
      exit 1
  esac
done

# Ensuring system is supported
case "$SYSTEM" in
  Darwin|Linux:Arch|Linux:Ubuntu)
    echo "--- Current system $SYSTEM is supported"
    ;;
  *)
    echo "Current system '$SYSTEM' is not supported. Aborting" >&2
    exit 2
esac

# Ensuring a package manager is available to install dependencies
case "$SYSTEM" in
  Darwin)
    if ! command -v brew >/dev/null; then
      echo '==> Installing HomeBrew'
      /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      echo '\o/ HomeBrew installed'
    else
      echo '--- Homebrew already installed'
    fi
    ;;
  Linux:Arch)
    if ! command -v pacman >/dev/null; then
      echo 'Arch system is expected to have the pacman package manager. Aborting' >&2
      exit 3
    fi
    ;;
  Linux:Ubuntu)
    if ! command -v apt-get >/dev/null; then
      echo 'Ubuntu system is expected to have the APT package manager. Aborting' >&2
      exit 3
    fi
esac

# Ensure Git is installed in the system
if ! command -v git >/dev/null; then
  echo '==> Installing Git'
  case "$SYSTEM" in
    Darwin)
      brew install git
      ;;
    Linux:Arch)
      $SUDO pacman -Sy git
      ;;
    Linux:Ubuntu)
      $SUDO apt-get install -y -qq git
  esac
  echo '\o/ Git installed'
else
  echo "--- Git $(git --version | cut -d\  -f3) installed in $(command -v git)"
fi

# Clone repository into the system.
if [ -d "$CLONE_TO/.git" ]; then
  echo "--- Repository present in $CLONE_TO"
  cd "$CLONE_TO"
  if ! [ "$(git diff-index --quiet HEAD)" ]; then
    echo 'Repository contains uncommitted changes. Please commit your changes or remove them. Aborting' >&2
    exit 4
  fi
  if ! [ "$(git rev-parse --abbrev-ref HEAD)" = "$BRANCH" ]; then
    echo "==> Checking out $BRANCH branch"
    git checkout "$BRANCH"
    echo '\o/ Branch checked out'
  else
    echo "--- Branch $BRANCH already checked out"
  fi
fi
if [ -d "$CLONE_TO" ] && ! [ -d "$CLONE_TO/.git" ]; then
  echo "Found a directory in '$CLONE_TO' but it is not a Git repository. Please fix it or remove it. Aborting" >&2
  exit 4
fi
if ! [ -d "$CLONE_TO" ]; then
  echo "==> Cloning $BRANCH branch to $CLONE_TO"
  git clone -b "$BRANCH" https://github.com/pfac/.files "$CLONE_TO"
  echo '\o/ Repository cloned'
fi

# Success
cat <<EOS
================================================================================

pfac's home bootstrapped successfully.

This means Git was installed if it wasn't present already, and pfac's dotfiles
were cloned to '$CLONE_TO'.

To proceed with the installation run '$CLONE_TO/bin/provision'.
EOS
