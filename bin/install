#!/bin/sh
#
# Configure the system with pfac's preferences.
#
set -e

BRANCH=master
CLONE_TO="$HOME/Developer/pfac/.files"

# Detect system
SYSTEM="$(uname)"
case "$SYSTEM" in
  Linux)
    SYSTEM="$SYSTEM:$(lsb_release -is)"
esac

# Process options
while getopts 'b:' option; do
  case "$option" in
    b)
      BRANCH="$OPTARG"
      ;;
    ?)
      echo "Unknown option $option" >&2
  esac
done

# Ensuring a package manager is available to install dependencies
case "$SYSTEM" in
  Darwin)
    if ! which brew >/dev/null 2>&1; then
      echo '==> Installing HomeBrew'
      /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      echo '\o/ HomeBrew installed'
    else
      echo '--- Homebrew already installed'
    fi
    ;;
  Linux:Ubuntu)
    if which apt-get >/dev/null 2>&1; then
      echo '==> Updating APT cache (sudo required)'
      sudo apt-get update -y
    else
      echo "System '$SYSTEM' is expected to have the APT package manager. Aborting" >&2
      exit 3
    fi
    ;;
  *)
    echo "Current system '$SYSTEM' is not supported. Aborting" >&2
    exit 2
esac

# Ensure Ansible is installed in the system.
if ! which ansible >/dev/null 2>&1; then
  case "$SYSTEM" in
    Darwin)
      echo '==> Installing Ansible through HomeBrew'
      brew install ansible
      echo '\o/ Ansible installed'
      ;;
    Linux:Ubuntu)
      echo '==> Installing Ansible through APT (sudo required)'
      sudo apt-get install -y ansible
      ;;
    *)
      echo "Current system '$SYSTEM' is not supported. Aborting" >&2
      exit 2
  esac
else
  echo "--- Ansible found: $(which ansible)"
fi

# Ensure Git is installed in the system.
if ! which git >/dev/null 2>&1; then
  case "$SYSTEM" in
    Darwin)
      echo '==> Installing Git through HomeBrew'
      brew install git
      echo '\o/ Git installed'
      ;;
    Linux:Ubuntu)
      echo '==> Installing Git through APT (sudo required)'
      sudo apt-get install -y git
      ;;
    *)
      echo "Current system '$SYSTEM' is not supported. Aborting" >&2
      exit 2
  esac
else
  echo "--- Git found: $(which git)"
fi

# Clone repository into the system.
if ! [ -d "$CLONE_TO/.git" ]; then
  echo "==> Cloning $BRANCH branch to $CLONE_TO"
  git clone -b "$BRANCH" https://github.com/pfac/.files "$CLONE_TO"
  echo '\o/ Repository cloned'
else
  echo "--- Repository present in $CLONE_TO"
  cd "$CLONE_TO"
  if ! [ "$(git rev-parse --abbrev-ref HEAD)" = "$BRANCH" ]; then
    echo "==> Checking out $BRANCH branch"
    git checkout "$BRANCH"
    echo '\o/ Branch checked out'
  else
    echo "--- Branch $BRANCH already checked out"
  fi
fi

# Hand-over installation to Ansible
bin/provision -d "$CLONE_TO"

# Success
cat <<EOS
================================================================================

pfac's home installed successfully \o/

To change something, simply edit the Ansible playbook for the current system and
run $CLONE_TO/bin/provision again.
EOS
