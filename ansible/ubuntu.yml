---
- hosts: localhost
  become: yes
  vars:
    google_chrome_apt_file_path: /etc/apt/sources.list.d/google-chrome.list
    slack_version: 3.3.3
  tasks:
    - name: Ensure APT is up-to-date
      apt:
        name: "*"
        state: latest
        autoclean: yes
        autoremove: yes
        force_apt_get: yes
        update_cache: yes
      retries: 3
      delay: 5
      register: system_packages

    #
    # Preparation for Google Chrome
    #

    - name: Check whether Google Chrome APT source is present
      stat:
        path: "{{ google_chrome_apt_file_path }}"
      register: google_chrome_apt_file

    - name: Ensure Google Chrome APT key is present
      apt_key:
        url: https://dl-ssl.google.com/linux/linux_signing_key.pub
      when: not google_chrome_apt_file.stat.exists

    - name: Ensure Google Chrome APT repository is present
      copy:
        dest: "{{ google_chrome_apt_file_path }}"
        mode: 0644
        content: |
          deb http://dl.google.com/linux/chrome/deb/ stable main

    #
    # Install packages
    #

    - name: Ensure APT packages are installed
      apt:
        name:
          - autoconf
          - bash
          - curl
          - direnv
          - git
          - gnome-tweak-tool
          - google-chrome-stable
          - libncurses5-dev
          - libssl-dev
          - neovim
          - nodejs
          - pass
          - python
          - ruby
          - tilix
          - tmux
          - vim
          - zsh
        force_apt_get: yes
        update_cache: yes

    #
    # Keybase
    #

    - name: Ensure Keybase is installed
      apt:
        deb: https://prerelease.keybase.io/keybase_amd64.deb
      register: keybase


    #
    # Slack
    #

    - name: Ensure Slack is installed
      apt:
        deb: "https://downloads.slack-edge.com/linux_releases/slack-desktop-{{ slack_version }}-amd64.deb"

    #
    # System customisations
    #

    - name: Ensure Tilix is the default terminal
      alternatives:
        name: x-terminal-emulator
        path: /usr/bin/tilix.wrapper

- hosts: localhost
  vars:
    github_hub_version: '2.6.0'
    terraform_version: '0.11.10'
  tasks:
    - name: Ensure Keybase is running
      shell: run_keybase
      when: ansible_user_id != 'root' and (system_packages.changed or keybase.changed)
      retries: 3
      delay: 5

    - name: Ensure .local/bin directory exists
      file:
        path: "{{ lookup('env', 'HOME') }}/.local/bin"
        state: directory
        mode: 0755

    - name: Ensure ASDF is installed
      git:
        repo: https://github.com/asdf-vm/asdf.git
        dest: "{{ lookup('env', 'HOME') }}/.asdf"
        version: v0.6.0

    - name: Load dconf configurations
      shell: "dconf load /{{ item | replace('.', '/') }}/ < '{{ lookup('env', 'HOME') }}/Developer/pfac/.files/dconf/{{ item }}'"
      with_items:
        - com.gexperts.Tilix
        - org.gnome.desktop.input-sources
        - org.gnome.desktop.wm.keybindings

    - name: Install extra fonts
      get_url:
        url: "{{ item.url }}"
        dest: "{{ lookup('env', 'HOME') }}/.local/share/fonts/{{ item.name }}"
      with_items:
        - name: FiraMono-Regular.otf
          url: https://github.com/mozilla/Fira/raw/master/otf/FiraMono-Regular.otf
        - name: FiraMono-Medium.otf
          url: https://github.com/mozilla/Fira/raw/master/otf/FiraMono-Medium.otf
        - name: FiraMono-Bold.otf
          url: https://github.com/mozilla/Fira/raw/master/otf/FiraMono-Bold.otf
        - name: Inconsolata.otf
          url: https://www.levien.com/type/myfonts/Inconsolata.otf
        - name: SourceCodeVariable-Roman.otf
          url: https://github.com/adobe-fonts/source-code-pro/releases/download/variable-fonts/SourceCodeVariable-Roman.otf
        - name: SourceCodeVariable-Italic.otf
          url: https://github.com/adobe-fonts/source-code-pro/releases/download/variable-fonts/SourceCodeVariable-Italic.otf
      register: extra_fonts

    - name: Refresh fonts cache
      shell: "fc-cache -f '{{ lookup('env', 'HOME') }}/.local/share/fonts'"
      when: extra_fonts.changed

    #
    # GitHub Hub
    #

    - name: Check whether GitHub Hub is installed
      stat:
        path: "{{ lookup('env', 'HOME') }}/.local/bin/hub"
      register: github_hub

    - name: Create temporary directory to install GitHub Hub
      tempfile:
        state: directory
        suffix: github_hub
      register: github_hub_tmp
      when: not github_hub.stat.exists

    - name: Download and expand GitHub Hub
      unarchive:
        remote_src: yes
        src: "https://github.com/github/hub/releases/download/v{{ github_hub_version }}/hub-linux-amd64-{{ github_hub_version }}.tgz"
        dest: "{{ github_hub_tmp.path }}"
      register: github_hub_files
      when: github_hub_tmp is changed

    - name: Install GitHub Hub
      shell: "PREFIX='{{ lookup('env', 'HOME') }}/.local' ./install"
      args:
        chdir: "{{ github_hub_tmp.path }}/hub-linux-amd64-{{ github_hub_version }}"
      when: github_hub_files is changed

    #
    # Terraform
    #

    - name: Ensure Terraform is installed
      unarchive:
        remote_src: yes
        src: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
        dest: "{{ lookup('env', 'HOME') }}/.local/bin"
        mode: 0755


- import_playbook: common.yml
