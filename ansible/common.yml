---
- hosts: localhost
  tasks:
    - name: Ensure current user has a 4096-bit SSH key
      user:
        name: "{{ ansible_user_id }}"
        generate_ssh_key: yes
        ssh_key_bits: 4096

    #
    # Check configuration files exist
    #

    - name: Check whether .bashrc exists
      stat:
        path: "{{ lookup('env', 'HOME') }}/.bashrc"
      register: bashrc

    - name: Check whether .bash_profile exists
      stat:
        path: "{{ lookup('env', 'HOME') }}/.bash_profile"
      register: bash_profile

    - name: Check whether .zshrc exists
      stat:
        path: "{{ lookup('env', 'HOME') }}/.zshrc"
      register: zshrc

    - name: Check whether .zprofile exists
      stat:
        path: "{{ lookup('env', 'HOME') }}/.zprofile"
      register: zprofile

    - name: Check whether .vimrc exists
      stat:
        path: "{{ lookup('env', 'HOME') }}/.vimrc"
      register: vimrc

    #
    # Create missing configuration files
    #

    - name: Create .bashrc from template
      copy:
        src: "{{ lookup('env', 'HOME') }}/Developer/pfac/.files/templates/.bashrc"
        dest: "{{ lookup('env', 'HOME') }}/.bashrc"
      when: not bashrc.stat.exists

    - name: Create .bash_profile from template
      copy:
        src: "{{ lookup('env', 'HOME') }}/Developer/pfac/.files/templates/.bash_profile"
        dest: "{{ lookup('env', 'HOME') }}/.bash_profile"
      when: not bash_profile.stat.exists

    - name: Create .zshrc from template
      copy:
        src: "{{ lookup('env', 'HOME') }}/Developer/pfac/.files/templates/.zshrc"
        dest: "{{ lookup('env', 'HOME') }}/.zshrc"
      when: not zshrc.stat.exists

    - name: Create .zprofile from template
      copy:
        src: "{{ lookup('env', 'HOME') }}/Developer/pfac/.files/templates/.zprofile"
        dest: "{{ lookup('env', 'HOME') }}/.zprofile"
      when: not zprofile.stat.exists

    - name: Create .vimrc from template
      copy:
        src: "{{ lookup('env', 'HOME') }}/Developer/pfac/.files/templates/.vimrc"
        dest: "{{ lookup('env', 'HOME') }}/.vimrc"
      when: not vimrc.stat.exists

    #
    # Check whether configuration files are set up to load configurations from this project
    #

    - name: Check whether .bashrc is set up
      lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.bashrc"
        regexp: '(\.|source) "\$HOME/Developer/pfac/\.files/\.bashrc"'
        line: '[ -f "$HOME/Developer/pfac/.files/.bashrc" ] && . "$HOME/Developer/pfac/.files/.bashrc"'
      check_mode: yes
      register: bashrc

    - name: Check whether .bash_profile is set up
      lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.bash_profile"
        regexp: '(\.|source) "\$HOME/Developer/pfac/\.files/\.bash_profile"'
        line: '[ -f "$HOME/Developer/pfac/.files/.bash_profile" ] && . "$HOME/Developer/pfac/.files/.bash_profile"'
      check_mode: yes
      register: bash_profile

    - name: Check whether .zshrc is set up
      lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.zshrc"
        regexp: '(\.|source) "\$HOME/Developer/pfac/\.files/\.zshrc"'
        line: '[ -f "$HOME/Developer/pfac/.files/.zshrc" ] && . "$HOME/Developer/pfac/.files/.zshrc"'
      check_mode: yes
      register: zshrc

    - name: Check whether .zprofile is set up
      lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.zprofile"
        regexp: '(\.|source) "\$HOME/Developer/pfac/\.files/\.zprofile"'
        line: '[ -f "$HOME/Developer/pfac/.files/.zprofile" ] && . "$HOME/Developer/pfac/.files/.zprofile"'
      check_mode: yes
      register: zprofile

    - name: Check whether .vimrc is set up
      lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.vimrc"
        regexp: 'so \$HOME/Developer/pfac/\.files/\.vimrc'
        line: '  so $HOME/Developer/pfac/.files/.vimrc'
      check_mode: yes
      register: vimrc

    #
    # Set up configuration files to load configurations from this project
    #

    - name: Set up .bashrc
      blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.bashrc"
        marker: '# {mark} pfac/.files managed block'
        block: |
          # Load base configurations
          [ -f "$HOME/Developer/pfac/.files/.bashrc" ] && . "$HOME/Developer/pfac/.files/.bashrc"
      when: bashrc is changed

    - name: Set up .bash_profile
      blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.bash_profile"
        marker: '# {mark} pfac/.files managed block'
        block: |
          # Load base configurations
          [ -f "$HOME/Developer/pfac/.files/.bash_profile" ] && . "$HOME/Developer/pfac/.files/.bash_profile"
      when: bash_profile is changed

    - name: Set up .zshrc
      blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.zshrc"
        marker: '# {mark} pfac/.files managed block'
        block: |
          # Load base configurations
          [ -f "$HOME/Developer/pfac/.files/.zshrc" ] && . "$HOME/Developer/pfac/.files/.zshrc"
      when: zshrc is changed

    - name: Set up .zprofile
      blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.zprofile"
        marker: '# {mark} pfac/.files managed block'
        block: |
          # Load base configurations
          [ -f "$HOME/Developer/pfac/.files/.zprofile" ] && . "$HOME/Developer/pfac/.files/.zprofile"
      when: zprofile is changed

    - name: Set up .vimrc
      blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.vimrc"
        marker: '" {mark} pfac/.files managed block "'
        block: |
          " Load base configurations "
          if filereadable($HOME . '/Developer/pfac/.files/.vimrc')
            so $HOME/Developer/pfac/.files/.vimrc
          endif
      when: vimrc is changed

    #
    # Configure Git
    #

    - name: Ensure Git is set up
      copy:
        src: "{{ lookup('env', 'HOME') }}/Developer/pfac/.files/{{ item }}"
        dest: "{{ lookup('env', 'HOME') }}/{{ item }}"
      with_items:
        - .gitconfig
        - .gitignore_global

    #
    # Configure Vim
    #

    - name: Ensure required directories for Vim are present
      file:
        path: "{{ lookup('env', 'HOME') }}/.vim/autoload"
        state: directory

    - name: Ensure vim-plug is installed for Vim
      get_url:
        url: 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        dest: "{{ lookup('env', 'HOME') }}/.vim/autoload/plug.vim"

    - name: Ensure vim-plug is up-to-date and all plugins are installed for Vim
      shell: vim +PlugUpgrade +PlugInstall +PlugUpdate +qall

    #
    # Configure NeoVim
    #

    - name: Ensure required directories for NeoVim are present
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ lookup('env', 'HOME') }}/.local/share/nvim/site/autoload"
        - "{{ lookup('env', 'HOME') }}/.config/nvim"

    - name: Ensure vim-plug is installed for NeoVim
      get_url:
        url: 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        dest: "{{ lookup('env', 'HOME') }}/.local/share/nvim/site/autoload/plug.vim"

    - name: Check whether .config/nvim/init.vim exists
      stat:
        path: "{{ lookup('env', 'HOME') }}/.config/nvim/init.vim"
      register: neovim_init

    - name: Create .config/nvim/init.vim from template
      copy:
        src: "{{ lookup('env', 'HOME') }}/Developer/pfac/.files/templates/.config/nvim/init.vim"
        dest: "{{ lookup('env', 'HOME') }}/.config/nvim/init.vim"
      when: not neovim_init.stat.exists

    - name: Check whether .config/nvim/init.vim is set up
      lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.config/nvim/init.vim"
        regexp: 'so \$HOME/Developer/pfac/\.files/\.config/nvim/init.vim'
        line: '  so $HOME/Developer/pfac/.files/.config/nvim/init.vim'
      check_mode: yes
      register: neovim_init

    - name: Set up .config/nvim/init.vim
      blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.config/nvim/init.vim"
        marker: '" {mark} pfac/.files managed block "'
        block: |
          " Load base configurations "
          if filereadable($HOME . '/Developer/pfac/.files/.config/nvim/init.vim')
            so $HOME/Developer/pfac/.files/.config/nvim/init.vim
          endif
      when: neovim_init is changed

    - name: Ensure vim-plug is up-to-date and all plugins are installed for NeoVim
      shell: nvim +PlugUpgrade +PlugInstall +PlugUpdate +qall

    #
    # Configure TMUX
    #

    - name: Check whether .tmux.conf exists
      stat:
        path: "{{ lookup('env', 'HOME') }}/.tmux.conf"
      register: tmux_conf

    - name: Create .tmux.conf from template
      copy:
        src: "{{ lookup('env', 'HOME') }}/Developer/pfac/.files/templates/.tmux.conf"
        dest: "{{ lookup('env', 'HOME') }}/.tmux.conf"
      when: not tmux_conf.stat.exists

    - name: Check whether .tmux.conf is set up
      lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.tmux.conf"
        regexp: 'so \$HOME/Developer/pfac/\.files/tmux/\.tmux.conf'
        line: '  so $HOME/Developer/pfac/.files/tmux/.tmux.conf'
      check_mode: yes
      register: tmux_conf

    - name: Set up .tmux.conf
      blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.tmux.conf"
        marker: '# {mark} pfac/.files managed block "'
        block: |
          # Load base configurations
          source-file "$HOME/Developer/pfac/.files/tmux/.tmux.conf"
      when: tmux_conf is changed

    - name: Ensure TMUX Plugin Manager is installed and up-to-date
      git:
        repo: https://github.com/tmux-plugins/tpm
        dest: "{{ lookup('env', 'HOME') }}/.tmux/plugins/tpm"
      register: tpm

    - name: Ensure TMUX plugins are installed
      shell: "{{ lookup('env', 'HOME') }}/.tmux/plugins/tpm/bin/install_plugins"

    - name: Ensure TMUX plugins are up-to-date
      shell: "{{ lookup('env', 'HOME') }}/.tmux/plugins/tpm/bin/update_plugins all"
